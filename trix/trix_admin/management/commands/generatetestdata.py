import os
from django.core.management.base import BaseCommand, CommandParser
from itertools import cycle
from trix.trix_core import models as trix_models


DJANGOENV = os.environ.get('DJANGOENV', 'develop')

if DJANGOENV == 'develop':  # Used for local development
    from model_bakery import baker
    from model_bakery.recipe import Recipe, seq
    GENERATED_USER_EMAIL = 'generated_user_email'
    TEST_TAG_NAME = 'generate_course'

    UserRecipe = Recipe(trix_models.User, email=seq(GENERATED_USER_EMAIL, suffix='@example.com'))

    class Command(BaseCommand):
        help = "Generate a new course with n number of assignments"

        def add_arguments(self, parser: CommandParser) -> None:
            parser.add_argument(
                '-n',
                type=int,
                help='Number of assignments to generate, defaults to 5',
                default=5
            )
            parser.add_argument(
                '--clean',
                action='store_true',
                help='Clean the database of courses generated by this command'
            )
            parser.add_argument(
                '-b',
                type=int,
                help='Number of "bymyself" Howsolved objects and the corresponding users to generate, defaults to 5',
                default=5
            )
            parser.add_argument(
                '-w',
                type=int,
                help='Number of "withhelp" Howsolved objects and the corresponding users to generate, defaults to 5',
                default=5
            )
            parser.add_argument(
                '-s',
                type=int,
                help='Number of users who has not solved to generate, defaults to 5',
                default=5
            )

        def _generate_howsolved_objects(self, howsolved, users, assignments, n):
            for a in assignments:
                baker.make(
                    trix_models.HowSolved,
                    howsolved=howsolved,
                    user=cycle(users),
                    assignment=a,
                    _quantity=n
                )

        def handle(self, *args, **options) -> None:
            if options['clean']:
                queryset = trix_models.Course.objects.filter(active_period__tag=TEST_TAG_NAME)
                course_tags = queryset.values_list('course_tag__id', flat=True)
                trix_models.Tag.objects.filter(id__in=course_tags).delete()
                queryset.delete()
                trix_models.Assignment.objects.filter(tags__tag=TEST_TAG_NAME).delete()
                trix_models.Tag.objects.filter(tag=TEST_TAG_NAME).delete()
                trix_models.User.objects.filter(email__startswith=GENERATED_USER_EMAIL).delete()
            else:
                tag, _ = trix_models.Tag.objects.get_or_create(
                    tag=TEST_TAG_NAME, defaults={'category': 'p'}
                )
                course = baker.make(trix_models.Course, active_period=tag)

                assignments = baker.make(trix_models.Assignment, tags=[tag, course.course_tag], _quantity=options['n'])

                bymyself_users = UserRecipe.make(_quantity=options['b'])
                withhelp_users = UserRecipe.make(_quantity=options['w'])
                notsolved_users = UserRecipe.make(_quantity=options['s'])

                self._generate_howsolved_objects('bymyself', bymyself_users, assignments, options['b'])
                self._generate_howsolved_objects('withhelp', withhelp_users, assignments, options['w'])
                self._generate_howsolved_objects('notsolved', notsolved_users, assignments, options['s'])
