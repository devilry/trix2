(function(){angular.module("trixStudent",["ngCookies","ngRoute","ui.bootstrap","trixStudent.directives","trixStudent.assignments.controllers"]).config(["$httpProvider",function($httpProvider){return $httpProvider.defaults.xsrfHeaderName="X-CSRFToken",$httpProvider.defaults.xsrfCookieName="csrftoken"}]).run(["$http","$cookies",function($http,$cookies){return $http.defaults.headers.common["X-CSRFToken"]=$cookies.csrftoken}])}).call(this),function(){angular.module("trixStudent.assignments.controllers",["ngRoute"]).controller("AddTagCtrl",["$scope","$window",function($scope,$window){$scope.tagToAdd="",$scope.negative=!1,$scope.addTag=function(){var currentUrl,tags;return tags=(currentUrl=new Url).query.tags,$scope.negative&&($scope.tagToAdd="-"+$scope.tagToAdd),tags=null!=tags&&""!==tags?tags+","+$scope.tagToAdd:$scope.tagToAdd,currentUrl.query.tags=tags,delete currentUrl.query.page,$window.location.href=currentUrl.toString()}}]).controller("RemoveTagCtrl",["$scope","$window",function($scope,$window){return $scope.removeTag=function(tagToRemove){var currentUrl,index,tags,tagsArray;return index=(tagsArray=(tags=(currentUrl=new Url).query.tags).split(",")).indexOf(tagToRemove),tagsArray.splice(index,1),tags=tagsArray.join(","),currentUrl.query.tags=tags,delete currentUrl.query.page,$window.location.href=currentUrl.toString()}}]).controller("SolutionCtrl",["$scope",function($scope){return $scope.isVisible=!1}]).controller("AssignmentCtrl",["$scope","$http","$rootScope",function($scope,$http,$rootScope){return $scope.howsolved=null,$scope.saving=!1,$scope.buttonClass="btn-default",$scope.boxClass="",$scope.$watch("howsolved",function(newValue){$scope.boxClass="bymyself"===newValue?($scope.buttonClass="btn-success","trix-assignment-solvedbymyself"):"withhelp"===newValue?($scope.buttonClass="btn-warning","trix-assignment-solvedwithhelp"):($scope.buttonClass="btn-default","trix-assignment-notsolved"),$rootScope.$emit("assignments.progressChanged")}),$scope._getApiUrl=function(){return"/assignment/howsolved/"+$scope.assignment_id},$scope._showError=function(message){return $scope.saving=!1,alert(message)},$scope._updateHowSolved=function(howsolved){var data;return $scope.saving=!0,data={howsolved:howsolved},$http.post($scope._getApiUrl(),data).then(function(response){return $scope.saving=!1,$scope.howsolved=response.data.howsolved}).catch(function(response){return console.log(response),$scope._showError("An error occurred!")})},$scope.solvedOnMyOwn=function(){return $scope._updateHowSolved("bymyself")},$scope.solvedWithHelp=function(){return $scope._updateHowSolved("withhelp")},$scope.notSolved=function(){return $scope.saving=!0,$http.delete($scope._getApiUrl()).then(function(response){return $scope.saving=!1,$scope.howsolved=null}).catch(function(response){return 404===response.status?($scope.saving=!1,$scope.howsolved=null):$scope._showError("An error occurred!")})}}]).controller("AssignmentListProgressController",["$scope","$http","$rootScope",function($scope,$http,$rootScope){var apiUrl,unbindProgressChanged;return $scope.loading=!0,(apiUrl=new Url).query.progressjson="1",$scope._loadProgress=function(){return $scope.loading=!0,$http.get(apiUrl.toString()).then(function(response){return $scope.loading=!1,$scope.solvedPercentage=response.data.percent,1<$scope.solvedPercentage&&$scope.solvedPercentage<20?$scope.progressBarClass="progress-bar-danger":$scope.solvedPercentage<45?$scope.progressBarClass="progress-bar-warning":100===$scope.solvedPercentage?$scope.progressBarClass="progress-bar-success":$scope.progressBarClass=""}).catch(function(response){return console.error("Failed to load progress:",response.statusText)})},unbindProgressChanged=$rootScope.$on("assignments.progressChanged",function(){return $scope._loadProgress()}),$scope.$on("$destroy",unbindProgressChanged)}])}.call(this),function(){angular.module("trixStudent.directives",[]).directive("trixAriaChecked",function(){return{restrict:"A",scope:{checked:"=trixAriaChecked"},controller:function($scope){},link:function(scope,element,attrs){var updateAriaChecked;(updateAriaChecked=function(){return scope.checked?element.attr("aria-checked","true"):element.attr("aria-checked","false")})(),scope.$watch(attrs.trixAriaChecked,function(newValue,oldValue){return updateAriaChecked()})}}})}.call(this);
//# sourceMappingURL=trix_student.min.js.map